#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('ejsChatApp:server');
var http = require('http');
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '2017');
app.set('port', port);
/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server);
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);
    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
            ? 'Pipe ' + port
            : 'Port ' + port;
    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
            ? 'pipe ' + addr
            : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

// socket code

//var nicknames = [];
var users = {};
io.sockets.on('connection', function (socket) {

    socket.on('new user', function (data, callback) {
        if (data in users) {
            callback(false);
        } else {
            callback(true);
            socket.nickname = data;
            socket.extra_info = 'this is extra info';
            //nicknames.push(socket.nickname);
            users[socket.nickname] = socket;
            updateNicknames();
        }
    });
    socket.on('send message', function (data, callback) {
        //io.sockets.emit('new message', {msg : data, nick : socket.nickname});
        var msg = data.trim();
        if (msg.substr(0, 3) === '/w ') {
            msg = msg.substr(3);
            var ind = msg.indexOf(' ');
            if (ind !== -1) {
                var name = msg.substring(0, ind);
                var msg = msg.substring(ind + 1);
                if (name in users) {
                    users[name].emit('whisper', {msg: msg, nick: socket.nickname});
                    users[socket.nickname].emit('whisper', {msg: msg, nick: socket.nickname});
                    console.log('whisper');
                } else {
                    callback('Error! enter a valid user!');
                }
            } else {
                callback('Error: please enter message for your whisper');
            }

        } else {
            io.sockets.emit('new message', {msg: msg, nick: socket.nickname});
        }

    });

    function updateNicknames() {
        //io.sockets.emit('usernames', nicknames);
        io.sockets.emit('usernames', Object.keys(users));
    }

    socket.on('disconnect', function (data) {
        if (!socket.nickname) {
            return;
        }
        delete users[socket.nickname];
        updateNicknames();
    });
});
